"""
BOTSHARE ‚Ä¢ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç (webhook only) + /price
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å —Å:
  python-telegram-bot[webhooks] == 20.8   (—Ç—è–Ω–µ—Ç httpx 0.26.x)
  httpx ~= 0.26.0
  Python 3.11
"""

import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
import httpx  # <= 0.26.x

# -----------------------------------------------------------
# 1. –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -----------------------------------------------------------
load_dotenv()  # –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Ç–∞–µ—Ç .env

TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")           # https://*.onrender.com/
PORT = int(os.getenv("PORT", "8080"))            # Render –ø–µ—Ä–µ–¥–∞—ë—Ç $PORT

if not (TOKEN and WEBHOOK_URL):
    raise RuntimeError("TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω—ã.")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)

# -----------------------------------------------------------
# 2. –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
# -----------------------------------------------------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üöÄ BOTSHARE online!\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "  /price [TICKER] ‚Äì —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SOL)\n"
        "  /help ‚Äì —Å–ø—Ä–∞–≤–∫–∞"
    )


async def help_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "/start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/price [TICKER] ‚Äì —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ –≤ USDC"
    )

async def price(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /price [TICKER]
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –≤ USDC —á–µ—Ä–µ–∑ CoinGecko.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–∫–µ—Ä—ã: SOL, JUP, ETH.
    """
    # 1) –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    token = ctx.args[0].upper() if ctx.args else "SOL"

    # 2) –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å CoinGecko ID
    id_map = {
        "SOL": "solana",
        "JUP": "jupiter",
        "ETH": "ethereum",
    }
    cg_id = id_map.get(token)
    if not cg_id:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–∫–µ—Ä '{token}'.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º: " + ", ".join(id_map.keys())
        )
        return

    # 3) –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ CoinGecko
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={cg_id}&vs_currencies=usd"
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            r = await client.get(url)
            r.raise_for_status()
            data = r.json()
    except Exception as e:
        logging.warning("CoinGecko API error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # 4) –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏ –æ—Ç–≤–µ—á–∞–µ–º
    price_usd = data[cg_id]["usd"]
    await update.message.reply_text(f"1 {token} ‚âà {price_usd:,.2f} USD")



# -----------------------------------------------------------
# 3. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# -----------------------------------------------------------
def main() -> None:
    logging.info("Launching BOTSHARE‚Ä¶")
    app = (
        ApplicationBuilder()
        .token(TOKEN)
        .build()                       # Updater —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    )

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("price", price))

    logging.info("Starting webhook on port %s", PORT)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        allowed_updates=Update.ALL_TYPES,
    )


if __name__ == "__main__":
    main()

